// Auto-generated by zimic.
// NOTE: Do not manually edit this file. Changes will be overridden.

import type { HttpSchema, HttpStatusCode, MergeHttpResponsesByStatusCode } from 'zimic/http';

export type PaymentSchema = HttpSchema.Paths<{
  '/payments': {
    /** Registrar um pagamento pendente */
    POST: PaymentOperations['payments/create'];
  };
  '/payments/:paymentId': {
    /** Obter um pagamento */
    GET: PaymentOperations['payments/get'];
  };
}>;

export interface PaymentComponents {
  schemas: {
    Payment: {
      /**
       * @description O identificador do pagamento
       * @example 1
       */
      id: number;
      /**
       * @description O estado do pagamento:
       *     - PENDING: pagamento ainda não realizado;
       *     - COMPLETE: pagamento realizado com sucesso;
       *     - REJECTED: pagamento rejeitado.
       *
       * @example PENDING
       * @enum {string}
       */
      state: 'PENDING' | 'COMPLETE' | 'REJECTED';
      /**
       * @description O identificador do item pago
       * @example 2
       */
      itemId: number;
      /**
       * @description O identificador do cliente pagador
       * @example 3
       */
      customerId: number;
      /**
       * @description A descrição do pagamento
       * @example Calça Jeans Azul
       */
      description: string | null;
      /**
       * @description A moeda utilizada no pagamento
       * @example BRL
       */
      currency: string;
      /**
       * Format: double
       * @description O valor total da compra na moeda especificada
       * @example 100
       */
      price: number;
    };
    ValidationError: {
      /**
       * @description A mensagem de erro
       * @example Validation error
       */
      message: string;
      /** @description Os problemas de validação */
      issues?: {
        /**
         * @description A mensagem de erro
         * @example Invalid input: expected string, received number
         */
        message?: string;
        /**
         * @description O código do erro
         * @example invalid_type
         */
        code?: string;
        /**
         * @description O caminho do erro
         * @example [
         *       "names",
         *       1
         *     ]
         */
        path?: (string | number)[];
        [key: string]: any;
      }[];
    };
    NotFoundError: {
      /**
       * @description A mensagem de erro
       * @example Not found
       */
      message: string;
    };
    InternalServerError: {
      /**
       * @description A mensagem de erro
       * @example Internal server error
       */
      message: string;
    };
  };
}

export interface PaymentOperations {
  'payments/create': HttpSchema.Method<{
    request: {
      body: {
        /**
         * @description O identificador do item pago
         * @example 1
         */
        itemId: number;
        /**
         * @description O identificador do cliente pagador
         * @example 2
         */
        customerId: number;
        /**
         * @description A descrição do pagamento
         * @example Calça Jeans Azul
         */
        description?: string;
        /**
         * @description A moeda utilizada no pagamento
         * @example BRL
         */
        currency: string;
        /**
         * Format: double
         * @description O valor do pagamento na moeda especificada
         * @example 100
         */
        price: number;
      };
    };
    response: MergeHttpResponsesByStatusCode<
      [
        {
          /** @description Pagamento pendente registrado com sucesso */
          201: {
            body: PaymentComponents['schemas']['Payment'];
          };
          /** @description Erro de validação */
          400: {
            body: PaymentComponents['schemas']['ValidationError'];
          };
        },
        {
          /** @description Erro inesperado */
          [StatusCode in HttpStatusCode.ServerError]: {
            body: PaymentComponents['schemas']['InternalServerError'];
          };
        },
      ]
    >;
  }>;
  'payments/get': HttpSchema.Method<{
    response: MergeHttpResponsesByStatusCode<
      [
        {
          /** @description Pagamento encontrado */
          200: {
            body: PaymentComponents['schemas']['Payment'];
          };
          /** @description Não encontrado */
          404: {
            body: PaymentComponents['schemas']['NotFoundError'];
          };
        },
        {
          /** @description Erro inesperado */
          [StatusCode in HttpStatusCode.ServerError]: {
            body: PaymentComponents['schemas']['InternalServerError'];
          };
        },
      ]
    >;
  }>;
}
